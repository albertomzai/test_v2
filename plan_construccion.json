{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET, POST, PUT, DELETE",
    "descripcion": "Gesti\u00f3n CRUD de tareas Kanban con persistencia en tasks.json.",
    "parametros_entrada": {
      "POST": {
        "contenido": "string",
        "estado": "string"
      },
      "PUT": {
        "contenido?": "string",
        "estado?": "string"
      }
    },
    "respuesta_esperada": {
      "GET": [
        {
          "id": "int",
          "contenido": "string",
          "estado": "string"
        }
      ],
      "POST, PUT": {
        "id": "int",
        "contenido": "string",
        "estado": "string"
      },
      "DELETE": {
        "mensaje": "string"
      }
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con estructura de directorios base (app, static, templates).",
        "Crear una clase modelo Task que represente la entidad con id, contenido y estado.",
        "Implementar funciones auxiliares para cargar y guardar el archivo tasks.json en disco.",
        "Definir el endpoint GET '/api/tasks' que devuelve todas las tareas serializadas a JSON.",
        "Definir el endpoint POST '/api/tasks' que recibe contenido y estado, asigna un id incremental, guarda la tarea y devuelve la representaci\u00f3n completa.",
        "Definir el endpoint PUT '/api/tasks/<int:id>' que permite actualizar contenido o estado de una tarea existente, persiste los cambios y devuelve la tarea actualizada.",
        "Definir el endpoint DELETE '/api/tasks/<int:id>' que elimina la tarea del almacenamiento persistente y confirma con un mensaje JSON.",
        "Agregar manejo de errores HTTP (404 para tareas no encontradas, 400 para datos inv\u00e1lidos).",
        "Configurar CORS en Flask para permitir solicitudes desde el frontend servido por el mismo host.",
        "Implementar pruebas unitarias b\u00e1sicas para cada endpoint usando la extensi\u00f3n Flask-Testing."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo 'index.html' con estructura b\u00e1sica HTML5 y referencia a un CSS interno.",
        "Dise\u00f1ar el layout de tres columnas verticales utilizando Flexbox o Grid para las secciones 'Por Hacer', 'En Progreso' y 'Hecho'.",
        "A\u00f1adir un bot\u00f3n de 'Agregar Tarea' que abre un formulario modal inline con campo de texto para el contenido.",
        "Implementar l\u00f3gica JavaScript para enviar una solicitud POST a '/api/tasks' al crear una nueva tarea y actualizar la vista sin recargar.",
        "Renderizar cada tarea como tarjeta dentro de su columna correspondiente, mostrando el contenido editable al hacer clic.",
        "Agregar eventos 'dblclick' o similar para permitir editar el texto de una tarjeta, enviando una solicitud PUT cuando se confirma el cambio.",
        "Integrar la API Drag\u2011and\u2011Drop nativa del navegador para mover tarjetas entre columnas; capturar el evento drop para actualizar el estado con un PUT a '/api/tasks/<id>'.",
        "Actualizar din\u00e1micamente la posici\u00f3n de las tarjetas en el DOM despu\u00e9s de cada operaci\u00f3n CRUD sin recargar la p\u00e1gina.",
        "Implementar manejo b\u00e1sico de errores visuales (mensajes emergentes) cuando una llamada API falle.",
        "Optimizar el rendimiento asegurando que las operaciones de renderizado se realicen solo sobre los cambios detectados."
      ]
    }
  ]
}