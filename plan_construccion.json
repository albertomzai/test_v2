{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET, POST",
    "descripcion": "Endpoint para obtener todas las tareas o crear una nueva.",
    "parametros_entrada_POST": {
      "contenido": "string",
      "estado": "string"
    },
    "respuesta_GET": "[{id: int, contenido: string, estado: string}]",
    "respuesta_POST": "{id: int, contenido: string, estado: string}"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios del proyecto Flask con un archivo principal app.py.",
        "Configurar el entorno virtual y declarar dependencias en requirements.txt (Flask).",
        "Implementar una clase TaskManager que maneje la carga, guardado y manipulaci\u00f3n de tareas desde tasks.json.",
        "Definir la ruta GET /api/tasks para devolver todas las tareas como JSON.",
        "Definir la ruta POST /api/tasks para crear una tarea; validar entrada y asignar un ID incremental.",
        "Implementar la l\u00f3gica PUT /api/tasks/<id> para actualizar contenido o estado; manejar casos de no encontrado.",
        "Implementar DELETE /api/tasks/<id> para eliminar una tarea existente; confirmar existencia previa.",
        "Asegurar que todas las rutas devuelvan respuestas HTTP adecuadas y JSON con cabeceras CORS permitiendo solicitudes desde el frontend local.",
        "Agregar pruebas unitarias simples usando unittest para cada endpoint b\u00e1sico.",
        "Configurar logging de nivel INFO en la aplicaci\u00f3n Flask para trazabilidad de operaciones CRUD."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear index.html con estructura b\u00e1sica: encabezado, tres columnas verticales etiquetadas 'Por Hacer', 'En Progreso' y 'Hecho'.",
        "Incluir un formulario simple al final de la columna 'Por Hacer' para a\u00f1adir nuevas tarjetas; el campo debe ser un input de texto.",
        "Escribir CSS en l\u00ednea dentro de <style> usando Flexbox o Grid para distribuir las columnas y tarjetas con estilos claros.",
        "Implementar JavaScript que, al cargar la p\u00e1gina, haga una petici\u00f3n GET /api/tasks y renderice cada tarea como tarjeta dentro de su columna correspondiente.",
        "Agregar un evento click a cada tarjeta que permita editar el texto en modo inline; al confirmar, enviar PUT /api/tasks/<id> con el nuevo contenido.",
        "Integrar drag-and-drop mediante la API DragEvent; marcar tarjetas con atributos data-id y data-estado para identificar.",
        "Al soltar una tarjeta en otra columna, actualizar su estado localmente y enviar una petici\u00f3n PUT /api/tasks/<id> indicando el nuevo estado.",
        "Incluir manejo de errores b\u00e1sicos: mostrar alertas o mensajes en la interfaz cuando las llamadas a la API fallen.",
        "Asegurar que el script sea autocontenida dentro del archivo index.html sin dependencias externas.",
        "Probar la interacci\u00f3n completa (crear, editar, mover, eliminar) en un navegador moderno para confirmar funcionalidad."
      ]
    }
  ]
}