{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET",
    "descripcion": "Devuelve todas las tareas existentes.",
    "parametros_entrada": {},
    "respuesta_esperada": [
      {
        "id": "integer",
        "content": "string",
        "status": "string"
      }
    ]
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con la estructura de directorios est\u00e1ndar (app, static, templates).",
        "Crear el archivo 'tasks.json' en la ra\u00edz del proyecto y asegurar su existencia al iniciar la aplicaci\u00f3n.",
        "Implementar una funci\u00f3n para cargar las tareas desde 'tasks.json' al inicio del servidor.",
        "Implementar una funci\u00f3n para guardar autom\u00e1ticamente las tareas modificadas de vuelta a 'tasks.json'.",
        "Definir el endpoint GET '/api/tasks' que devuelve la lista completa de tareas en formato JSON.",
        "Definir el endpoint POST '/api/tasks' que recibe un cuerpo con 'content' y opcionalmente 'status', asigna un ID \u00fanico, guarda la tarea y devuelve la tarea creada.",
        "Definir el endpoint PUT '/api/tasks/<int:id>' que actualiza el contenido o estado de una tarea existente y devuelve la tarea actualizada.",
        "Definir el endpoint DELETE '/api/tasks/<int:id>' que elimina la tarea correspondiente y confirma la eliminaci\u00f3n en JSON.",
        "Agregar manejo de errores para solicitudes con IDs no existentes y validar los campos obligatorios del cuerpo.",
        "Configurar CORS para permitir peticiones desde 'index.html' alojado localmente.",
        "Implementar pruebas unitarias simples para cada endpoint usando Flask's test client.",
        "Documentar la API en un README breve dentro del repositorio."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'index.html' con una estructura b\u00e1sica de encabezado, tres columnas y un bot\u00f3n para agregar tareas.",
        "Agregar estilos CSS inline o en una etiqueta <style> que utilicen Flexbox o Grid para organizar las columnas verticalmente.",
        "Implementar un formulario modal o popup sencillo dentro del HTML para capturar el contenido de nuevas tareas.",
        "Escribir JavaScript ES6 dentro de una etiqueta <script> que, al cargar la p\u00e1gina, realice una llamada GET a '/api/tasks' y renderice las tarjetas en sus columnas correspondientes.",
        "A\u00f1adir eventos click a cada tarjeta que permitan editar su texto mediante un prompt o campo editable inline.",
        "Implementar drag-and-drop nativo del navegador (HTML5 Drag Events) para permitir mover tarjetas entre columnas.",
        "Al completar el drop, enviar una solicitud PUT al backend con la nueva 'status' y actualizar la vista seg\u00fan la respuesta.",
        "Agregar manejo de errores en las llamadas AJAX para mostrar mensajes de alerta simples si el servidor responde con error.",
        "Garantizar que todas las interacciones sean accesibles (e.g., focus management) y que el c\u00f3digo sea modular mediante funciones reutilizables dentro del mismo archivo.",
        "Probar la aplicaci\u00f3n localmente contra el backend Flask para asegurar la correcta persistencia en 'tasks.json'."
      ]
    }
  ]
}