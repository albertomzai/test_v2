{'api_contract': {'ruta': '/api/tasks', 'metodos_disponibles': ['GET', 'POST'], 'descripcion': 'Endpoint para listar y crear tareas.', 'parametros_entrada_post': {'contenido': 'string', 'estado': 'string'}, 'respuesta_get': [{'id': 'int', 'contenido': 'string', 'estado': 'string'}], 'respuesta_post': {'id': 'int', 'contenido': 'string', 'estado': 'string'}}, 'plan': [{'etapa': 'backend', 'tareas': ['Inicializar un proyecto Flask con la estructura de carpetas adecuada.', "Crear un módulo para cargar y guardar tareas en 'tasks.json' usando JSON estándar.", 'Definir el modelo de tarea con atributos id, contenido y estado.', "Implementar el endpoint GET '/api/tasks' que devuelve todas las tareas almacenadas.", "Implementar el endpoint POST '/api/tasks' que recibe contenido y estado, asigna un ID único, guarda la tarea y devuelve la representación JSON.", "Implementar el endpoint PUT '/api/tasks/<id>' que actualiza el contenido o estado de una tarea existente y persiste el cambio en 'tasks.json'.", "Implementar el endpoint DELETE '/api/tasks/<id>' que elimina la tarea correspondiente del archivo JSON.", 'Añadir validación de datos entrantes y manejo de excepciones para evitar errores 400/404.', 'Configurar CORS para permitir peticiones desde cualquier origen durante desarrollo.', 'Incluir pruebas unitarias básicas para cada endpoint utilizando unittest o pytest.']}, {'etapa': 'frontend', 'tareas': ["Crear el archivo 'index.html' con una estructura básica de encabezado, cuerpo y estilo inline.", "Diseñar tres columnas verticales etiquetadas 'Por Hacer', 'En Progreso' y 'Hecho' usando Flexbox o Grid en CSS.", "Añadir un botón o formulario para crear nuevas tarjetas que envíe una solicitud POST al backend con el contenido ingresado y estado inicial 'Por Hacer'.", "Implementar la lógica JavaScript para cargar todas las tareas desde GET '/api/tasks' y renderizarlas como tarjetas dentro de sus columnas correspondientes.", 'Agregar funcionalidad de edición inline: al hacer clic en una tarjeta, reemplazar su texto por un campo editable que guarde cambios con PUT cuando se confirme.', "Implementar drag-and-drop utilizando la API Drag and Drop nativa para mover tarjetas entre columnas y actualizar el estado vía PUT a '/api/tasks/<id>'.", 'Actualizar dinámicamente la vista tras cada operación (creación, edición, movimiento o eliminación) sin recargar la página.', 'Incluir manejo básico de errores en el frontend mostrando mensajes al usuario cuando las peticiones API fallen.']}]}