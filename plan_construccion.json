{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET/POST",
    "descripcion": "Obtener todas las tareas o crear una nueva.",
    "parametros_entrada_POST": {
      "contenido": "string",
      "estado": "string"
    },
    "respuesta_GET": {
      "tareas": "[{id, contenido, estado}]"
    },
    "respuesta_POST": {
      "id": "int",
      "contenido": "string",
      "estado": "string"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con estructura de directorios: app/, static/ y templates/.",
        "Crear un módulo `tasks.py` que maneje la carga, guardado y generación de ID para tareas almacenadas en 'tasks.json'.",
        "Implementar el endpoint GET '/api/tasks' que devuelve todas las tareas como JSON.",
        "Implementar el endpoint POST '/api/tasks' que valida los campos 'contenido' y 'estado', asigna un ID único, guarda la tarea y retorna el objeto creado.",
        "Implementar el endpoint PUT '/api/tasks/<int:id>' que actualiza el contenido o estado de una tarea existente, persiste el cambio en 'tasks.json' y devuelve la tarea actualizada.",
        "Implementar el endpoint DELETE '/api/tasks/<int:id>' que elimina la tarea correspondiente, actualiza 'tasks.json' y confirma con un mensaje JSON.",
        "Configurar CORS para permitir solicitudes desde el mismo dominio del archivo index.html.",
        "Agregar manejo de excepciones: 404 cuando una tarea no exista, 400 por datos inválidos, y retorno de códigos HTTP adecuados.",
        "Incluir pruebas unitarias básicas que verifiquen la creación, lectura, actualización y eliminación de tareas en memoria antes de escribir a disco."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'index.html' con una estructura básica: <head> con estilos CSS y <body> con un contenedor principal.",
        "Definir tres columnas dentro del contenedor usando Flexbox o Grid, etiquetadas como 'Por Hacer', 'En Progreso' y 'Hecho'.",
        "Agregar un botón '+ Añadir Tarea' que abre un modal o input inline para introducir el contenido de la nueva tarjeta; al confirmar, enviar una solicitud POST a '/api/tasks' y renderizar la tarjeta en la columna 'Por Hacer'.",
        "Implementar cada tarjeta como un <div> con atributo data-id y contenteditable para permitir edición del texto; al perder foco (blur), enviar una solicitud PUT a actualizar el contenido.",
        "Añadir lógica de drag-and-drop usando HTML5 Drag & Drop API: establecer draggable=true en tarjetas, manejar eventos dragstart, dragover y drop en las columnas, y actualizar la posición interna de las tarjetas en el DOM.",
        "Al soltar una tarjeta en otra columna, enviar una solicitud PUT a '/api/tasks/<id>' con el nuevo estado basado en la columna objetivo.",
        "Implementar funciones JavaScript para cargar todas las tareas al iniciar la página mediante GET '/api/tasks', y renderizarlas en sus columnas correspondientes.",
        "Incluir manejo de errores en cada llamada fetch: mostrar alertas o mensajes temporales si la API devuelve error.",
        "Aplicar estilos CSS minimalistas pero claros: tarjetas con sombra, bordes redondeados, colores diferenciadores por columna, y transiciones suaves durante drag-and-drop."
      ]
    }
  ]
}