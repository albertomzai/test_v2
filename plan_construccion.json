{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET, POST, PUT, DELETE",
    "descripcion": "Gestión CRUD de tareas Kanban.",
    "parametros_entrada_POST": {
      "content": "string",
      "status": "string"
    },
    "parametros_entrada_PUT": {
      "content?": "string",
      "status?": "string"
    },
    "respuesta_GET": "[{id: int, content: string, status: string}]",
    "respuesta_POST": "{id: int, content: string, status: string}",
    "respuesta_PUT": "{id: int, content: string, status: string}"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con la estructura de carpetas /app y /static.",
        "Crear el archivo 'tasks.json' en la raíz del proyecto para persistencia.",
        "Implementar una función utilitaria que cargue y guarde datos JSON desde/para 'tasks.json'.",
        "Definir el endpoint GET '/api/tasks' que devuelve todas las tareas leídas de 'tasks.json'.",
        "Definir el endpoint POST '/api/tasks' que recibe JSON con 'content' y opcionalmente 'status', asigna un id único, guarda la tarea y responde con el objeto creado.",
        "Definir el endpoint PUT '/api/tasks/<int:id>' que actualiza 'content' o 'status' de la tarea identificada y devuelve el objeto actualizado.",
        "Definir el endpoint DELETE '/api/tasks/<int:id>' que elimina la tarea correspondiente y confirma con un mensaje JSON.",
        "Añadir manejo de excepciones para errores 404, 400 y 500 con respuestas JSON claras.",
        "Configurar CORS en Flask para permitir peticiones desde localhost del frontend.",
        "Escribir pruebas unitarias básicas para cada endpoint usando unittest o pytest."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un único archivo 'index.html' con estructura básica: <html>, <head> y <body>.",
        "Incluir en el head los estilos CSS necesarios para tres columnas flexibles con títulos 'Por Hacer', 'En Progreso', 'Hecho'.",
        "Agregar un contenedor principal que contenga las tres columnas, cada una con un id único (por_hacer, en_progreso, hecho).",
        "Añadir un botón de ‘+ Añadir Tarea’ dentro de la columna 'Por Hacer' que abre un prompt para el texto.",
        "Implementar JavaScript inline que al pulsar el botón envíe una petición POST a '/api/tasks' y añada la tarjeta resultante en la columna correspondiente.",
        "Crear funciones JS para renderizar tarjetas desde los datos recibidos del backend, con atributos data-id y content editable.",
        "Añadir listeners de 'click' sobre cada tarjeta que permita editar su texto inline y envíe una petición PUT al backend cuando se pierda el foco.",
        "Implementar drag‑and‑drop usando la API DragEvent: establecer draggable en las tarjetas, manejar eventos 'dragstart', 'dragover', 'drop' en las columnas.",
        "Al soltar una tarjeta en otra columna, actualizar su estado localmente y enviar una petición PUT a '/api/tasks/<id>' con el nuevo status.",
        "Incluir manejo de errores básicos: alertas cuando la API devuelve un error o la red falla.",
        "Añadir lógica para cargar todas las tareas al iniciar la página mediante GET '/api/tasks' y renderizarlas en sus columnas respectivas."
      ]
    }
  ]
}