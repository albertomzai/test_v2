{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo_GET": "GET",
    "descripcion_GET": "Devuelve todas las tareas existentes.",
    "metodo_POST": "POST",
    "descripcion_POST": "Crea una nueva tarea con contenido y estado inicial.",
    "metodo_PUT_id": "PUT /api/tasks/<id>",
    "descripcion_PUT_id": "Actualiza el contenido o estado de una tarea existente.",
    "metodo_DELETE_id": "DELETE /api/tasks/<id>",
    "descripcion_DELETE_id": "Elimina la tarea especificada."
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con una estructura de directorios adecuada para el backend.",
        "Crear un modelo simple en Python que represente una tarea con campos id, contenido y estado.",
        "Implementar la carga inicial del archivo 'tasks.json' al arrancar la aplicaci\u00f3n y guardarlo tras cada modificaci\u00f3n.",
        "Definir el endpoint GET '/api/tasks' que devuelve todas las tareas en formato JSON.",
        "Definir el endpoint POST '/api/tasks' que recibe un cuerpo con contenido y estado, asigna un id \u00fanico, agrega la tarea a la lista y persiste los datos.",
        "Definir el endpoint PUT '/api/tasks/<id>' que actualiza el contenido o estado de una tarea existente seg\u00fan el cuerpo recibido y guarda los cambios.",
        "Definir el endpoint DELETE '/api/tasks/<id>' que elimina la tarea correspondiente y persiste la actualizaci\u00f3n.",
        "Agregar manejo de errores para solicitudes inv\u00e1lidas, IDs no encontrados y problemas de lectura/escritura del archivo JSON.",
        "Configurar CORS en Flask para permitir peticiones desde el dominio donde se servir\u00e1 'index.html'.",
        "Implementar pruebas unitarias b\u00e1sicas que verifiquen cada endpoint y la persistencia en 'tasks.json'."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo 'index.html' con estructura b\u00e1sica HTML5, t\u00edtulo y referencias a CSS y JS inline.",
        "Definir estilos CSS utilizando Flexbox o Grid para tres columnas verticales etiquetadas 'Por Hacer', 'En Progreso' y 'Hecho'.",
        "Agregar un bot\u00f3n de 'A\u00f1adir Tarea' que abre un peque\u00f1o formulario modal o inline para introducir el contenido de una nueva tarjeta.",
        "Implementar la l\u00f3gica JavaScript para enviar una solicitud POST a '/api/tasks' al crear una tarea, recargar la vista con la respuesta y a\u00f1adir la tarjeta a la columna 'Por Hacer'.",
        "Renderizar las tarjetas existentes en sus columnas correspondientes utilizando datos obtenidos mediante un GET inicial a '/api/tasks'.",
        "Habilitar edici\u00f3n inline de una tarjeta al hacer clic sobre su contenido, enviando una solicitud PUT a '/api/tasks/<id>' con el nuevo texto y actualizando la vista.",
        "Integrar drag-and-drop usando la API HTML5 Drag and Drop para permitir mover tarjetas entre columnas.",
        "Al completar un drop, enviar una solicitud PUT a '/api/tasks/<id>' con el estado actualizado seg\u00fan la columna destino y reflejar el cambio en la interfaz.",
        "Incluir manejo b\u00e1sico de errores y mensajes de usuario para fallos de red o respuestas inesperadas del backend.",
        "Optimizar la aplicaci\u00f3n para que sea totalmente autocontenida dentro de 'index.html', evitando dependencias externas."
      ]
    }
  ]
}