{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo_get": "GET",
    "descripcion_get": "Devuelve todas las tareas almacenadas en el servidor.",
    "metodo_post": "POST",
    "descripcion_post": "Crea una nueva tarea con contenido y estado inicial 'Por Hacer'.",
    "metodo_put": "PUT",
    "descripcion_put": "Actualiza el contenido o el estado de la tarea identificada por id.",
    "metodo_delete": "DELETE",
    "descripcion_delete": "Elimina la tarea especificada por id."
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear un proyecto Flask con la estructura de carpetas `app/`, `app/routes.py` y `app/models.py`.",
        "Definir una clase Task que represente las tareas con atributos id, contenido y estado.",
        "Implementar funciones para cargar y guardar la lista de tareas desde y hacia el archivo `tasks.json` en disco.",
        "Crear un endpoint GET `/api/tasks` que lea todas las tareas del JSON y devuelva un array JSON.",
        "Crear un endpoint POST `/api/tasks` que reciba JSON con contenido, genere un id único, establezca estado 'Por Hacer', guarde la tarea y responda con el objeto creado.",
        "Crear un endpoint PUT `/api/tasks/<int:id>` que actualice el contenido o estado de la tarea correspondiente, persista los cambios y devuelva el objeto actualizado.",
        "Crear un endpoint DELETE `/api/tasks/<int:id>` que elimine la tarea del archivo JSON y confirme la eliminación con un mensaje de éxito.",
        "Agregar manejo de errores para casos de ID no encontrado y validación de datos entrantes.",
        "Configurar CORS en Flask para permitir solicitudes desde el mismo dominio del frontend sin encabezados adicionales.",
        "Escribir pruebas unitarias básicas que verifiquen cada endpoint (opcional, pero recomendado)."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo `index.html` con la estructura básica de HTML5 y enlaces a CSS interno y script JavaScript inline.",
        "Definir en CSS tres columnas flexibles con títulos 'Por Hacer', 'En Progreso' y 'Hecho' que contengan listas de tarjetas.",
        "Implementar en JavaScript una función para cargar las tareas del backend usando `fetch('/api/tasks')` y renderizarlas dentro de sus respectivas columnas según el estado.",
        "Agregar un formulario simple con un campo de texto y botón para crear nuevas tareas; al enviar, llamar a `POST /api/tasks` y actualizar la vista.",
        "Habilitar edición en línea: al hacer clic en una tarjeta, reemplazar su contenido por un input editable que envíe una petición `PUT` al backend cuando se confirme el cambio.",
        "Integrar la API Drag‑and‑Drop de HTML5 para permitir arrastrar tarjetas entre columnas; al soltar, capturar el nuevo estado y enviar una petición `PUT /api/tasks/<id>` con el estado actualizado.",
        "Añadir un botón o ícono en cada tarjeta para eliminarla; al pulsarlo, enviar una petición `DELETE` y remover la tarjeta del DOM.",
        "Implementar manejo de errores en todas las llamadas AJAX mostrando mensajes de alerta simples dentro de la página.",
        "Garantizar que la aplicación sea responsiva usando Flexbox, manteniendo la funcionalidad drag‑and‑drop en dispositivos táctiles (opcional)."
      ]
    }
  ]
}