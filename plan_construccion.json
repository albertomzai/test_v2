{
  "api_contract": {
    "ruta": "/api/tasks",
    "metodo": "GET/POST",
    "descripcion": "Endpoint para listar y crear tareas.",
    "parametros_entrada_post": {
      "content": "string",
      "state": "string"
    },
    "respuesta_get": {
      "tasks": "[{id: int, content: string, state: string}]"
    },
    "respuesta_post": {
      "task": "{id: int, content: string, state: string}"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con la estructura de directorios necesaria.",
        "Crear el archivo 'tasks.json' y cargar su contenido al iniciar el servidor.",
        "Implementar la ruta GET '/api/tasks' que devuelve todas las tareas en formato JSON.",
        "Implementar la ruta POST '/api/tasks' que recibe los campos 'content' y 'state', asigna un ID único, guarda la tarea en memoria y escribe el archivo 'tasks.json'.",
        "Implementar la ruta PUT '/api/tasks/<int:id>' que actualiza el contenido o estado de una tarea existente, persiste el cambio en 'tasks.json' y devuelve la tarea actualizada.",
        "Implementar la ruta DELETE '/api/tasks/<int:id>' que elimina la tarea correspondiente, actualiza el archivo 'tasks.json' y confirma la eliminación con un código 204.",
        "Añadir manejo de errores para solicitudes inválidas o tareas no encontradas.",
        "Configurar CORS para permitir peticiones desde el frontend alojado en la misma máquina.",
        "Crear pruebas unitarias básicas para cada endpoint utilizando Flask's test client."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo 'index.html' con estructura HTML5 básica y enlaces a CSS interno para estilos Flexbox/ Grid.",
        "Definir en el HTML tres contenedores verticales etiquetados como 'Por Hacer', 'En Progreso' e 'Hecho'.",
        "Agregar un botón o formulario dentro de la columna 'Por Hacer' que permita introducir texto y enviar una petición POST a '/api/tasks'.",
        "Escribir JavaScript inline para cargar las tareas existentes mediante GET al cargar la página y renderizarlas en sus columnas correspondientes.",
        "Implementar lógica de edición: al hacer clic en el contenido de una tarjeta, reemplazarlo por un campo de entrada que permita modificar el texto y enviar una petición PUT al backend.",
        "Incorporar drag-and-drop usando la API Drag and Drop nativa: habilitar tarjetas como elementos arrastrables y columnas como zonas de destino.",
        "Al soltarse una tarjeta en una nueva columna, actualizar su estado localmente y enviar una petición PUT con el nuevo estado al backend.",
        "Añadir manejo básico de errores visuales (mensajes emergentes o alertas) cuando las peticiones a la API fallen.",
        "Optimizar el rendimiento minimizando manipulaciones del DOM: usar event delegation donde sea apropiado."
      ]
    }
  ]
}